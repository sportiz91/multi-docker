server {
    listen 3000;

    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
}

#137. Altering Nginx's Listen Port
#Vamos a poner un poco de configuración para el nginx server.
#A través de la location instruction vamos a hacer el routing.
#Recordemos que /usr/share/nginx/html es la carpeta donde pondremos todos nuestros production assets.

#Q: Can you explain me in detail the following default.conf of an Nginx server setup?

#server {
#    listen 3000;

#    location / {
#        root /usr/share/nginx/html;
#        index index.html index.htm;
#        try_files $uri $uri/ /index.html;
#    }
#}

#A:
#server {
#    listen 3000;
#This block defines a server block for Nginx, which listens on port 3000. 
#This means that Nginx will receive all incoming requests on port 3000.
#    location / {
#        root /usr/share/nginx/html;
#        index index.html index.htm;
#        try_files $uri $uri/ /index.html;
#    }
#This block defines a location block for the root URL /. 
#When a user requests the root URL of the server, Nginx will look for the files in the root directory /usr/share/nginx/html.
#The index directive specifies the list of files to look for if the user doesn't request a specific file 
#(in this case, index.html or index.htm). 
#The try_files directive specifies a fallback path to follow if the requested file doesn't exist.
#In this case, Nginx will try $uri and $uri/ (the requested URI and a directory with that name, respectively)
#before falling back to /index.html.
#This configuration file serves static files from /usr/share/nginx/html on port 3000. 
#Any incoming request to http://localhost:3000 will be served the file /usr/share/nginx/html/index.html if it exists. 
#If it doesn't exist, it will try to serve the file matching the URI or return a 404 error.

#Q: When you say: "Nginx will look for the files in the root directory" you mean that, in Nginx, 
#there's an actual "root" folder with the directory "/usr/share/nginx/html? Can you explain me in detail?

#A:
#Yes, that's correct. In the Nginx configuration file, you can specify a "root" directory for each server block. 
#In this case, the "root" directory is set to "/usr/share/nginx/html".
#This means that when a client makes a request for a resource (such as an 
#HTML file, image, or CSS file), Nginx will look for that file in the "/usr/share/nginx/html" directory.
#For example, if a client requests "http://example.com/index.html", Nginx will look for the file 
#"/usr/share/nginx/html/index.html". If the file exists, it will be served to the client. If it doesn't exist, 
#Nginx will return a 404 error.
#The "try_files" directive in the location block tells Nginx how to handle requests that don't match an existing file.
#In this case, it will first try to serve the requested file ("$uri"), then try to serve a directory with the same name 
#as the requested file ("$uri/"),
#and finally, if neither of those exist, it will serve the "index.html" file ("/index.html"). This is a common way to handle 
#client-side routing in single-page applications.

#Q: Can you explain me in detail the index directive of nginx?
#A:
#The index directive is used to specify a list of filenames to look for when a client requests a directory instead of a specific file.
#For example, if a user requests http://example.com/, Nginx will look for the specified index files in the directory 
#and serve the first one it finds.
#The index directive can be set at the server, location or if directive levels. Here is the syntax for the index directive:
#index file1 file2 file3;
#In this syntax, you can specify any number of files, separated by spaces, and the files will be searched 
#for in the order they are listed.
#If Nginx finds one of the files, it will serve it to the client. If none of the files are found, 
#Nginx will return an HTTP 404 error to the client.
#For example, if the index directive is set to index index.html index.htm, Nginx will first look for a file named 
#index.html, and if it doesn't find it, it will look for a file named index.htm. If neither of these files is found, 
#Nginx will return a 404 error.
#You can also include variables in the index directive, which can be useful for dynamic content. 
#For example, you could set the index directive to index index.php index.html, which would serve 
#the index.php file if it exists and fall back to index.html if it doesn't.

#Q: Can you explain me in detail the try_files directive of nginx?
#A: 
#The try_files directive in nginx is used to define a set of files that should be tried in 
#order until one of them is successfully loaded by the server.
#The syntax of the try_files directive is as follows:
#try_files file ... uri;
#Here, file is a path to a file on the server that nginx should attempt 
#to load, and uri is the original request URI that nginx should use to process the request if none of the files 
#listed in file are found.
#The try_files directive can also be used with named locations.
#When nginx receives a request, it will first attempt to load the file specified in the first parameter of the try_files directive.
#If it is successful, nginx will serve that file and the request will be complete.
#If nginx is unable to find the file specified in the first parameter, it will move on to the next file 
#specified in the try_files directive and attempt to load that. 
#This process continues until nginx either finds a file that it can serve, or it runs out of files to try.
#If none of the files specified in the try_files directive are found, nginx will use the uri parameter to process the request.
#This means that if the original request was for a file that does not exist on the server, nginx will attempt to 
#process the request using the URI that was originally requested.
#For example, in the location / block of the default.conf file you provided earlier, the try_files directive is used like this:
#try_files $uri $uri/ /index.html;
#This tells nginx to first attempt to load the file specified in the $uri variable. 
#If that file is not found, nginx will attempt to load the directory specified in the $uri/ variable.
#If that directory does not exist, nginx will attempt to serve the file specified in the /index.html 
#path. If none of these files are found, nginx will return a 404 error to the client.

#Q: Is it possible to use index and try_files directives at the same time? Aren't those directives similar in behavior?
#A:
#Yes, it's possible to use the index and try_files directives together in an Nginx configuration. While 
#both directives are used to serve a default file when a client requests a directory, they have different purposes and behaviors.
#The index directive is used to specify the default file that should be served when a client requests a directory. 
#If the file specified by index is not found, Nginx will return a 404 error.
#On the other hand, the try_files directive is used to specify a fallback mechanism for serving files.
#It tries to serve the files in the order specified until one of them is found. If none of the files specified by try_files are found, 
#Nginx will return a 404 error.
#By using both directives together, you can provide a fallback mechanism to serve default files when they are not found in the directory.
#For example, the following configuration serves index.html by default and falls back to 404.html if it's not found:
#server {
#    listen 80;
#    server_name example.com;

#    root /var/www/html;
#    index index.html;

#    location / {
#        try_files $uri $uri/ /404.html;
#    }
#}
#In this example, Nginx will look for index.html in the root directory and serve it as the default file.
#If it's not found, the try_files directive will try to serve the requested file, then the directory index ($uri/), and finally 404.html
#If none of these files are found, Nginx will return a 404 error.

#Q: Can you explain me the $uri? What is the "$"? Can you provide me some code examples to better understand?
#A:
#In Nginx, the $ sign is used to denote variables. $uri is a variable that contains the current URI requested by the client.
#For example, if a client requests the URL http://example.com/path/to/page.html, then $uri will be equal to /path/to/page.html.
#The try_files directive can use $uri to attempt to serve a file from the file system. For example, try_files $uri $uri/ /index.html; 
#tells Nginx to try to serve the file at the URI specified by $uri
#If that file is not found, Nginx will try to serve a directory with the same name as the file ($uri/). If that also fails, 
#Nginx will serve /index.html.
#Here is an example of how $uri is used in a location block:
#location /static/ {
#    alias /var/www/static/;
#    try_files $uri =404;
#}
#In this example, Nginx will serve files from the /var/www/static/ directory for requests that start with /static/
#The try_files directive tells Nginx to try to serve the file specified by $uri. If that file is not found, 
#Nginx will return a 404 error.








